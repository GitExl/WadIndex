openapi: 3.0.0

info:
  version: 1.0.0
  title: WadIndex API

components:
  schemas:

    Level:
      type: object
      properties:
        collection:
          type: string
        path:
          type: string
        name:
          type: string
        title:
          type: string
          nullable: true
        par_time:
          type: integer
        music:
          $ref: '#/components/schemas/LevelMusic'
          nullable: true
        next:
          $ref: '#/components/schemas/LevelTeaser'
          nullable: true
        next_secret:
          $ref: '#/components/schemas/LevelTeaser'
          nullable: true
        cluster:
          type: string
          nullable: true
        format:
          type: string
        allow_jump:
          type: boolean
          nullable: true
        allow_crouch:
          type: boolean
          nullable: true
        thing_count:
          type: integer
        line_count:
          type: integer
        sector_count:
          type: integer
        side_count:
          type: integer

    LevelTeaser:
      type: object
      properties:
        collection:
          type: string
        path:
          type: string
        name:
          type: string
        title:
          type: string
          nullable: true
        music_name:
          type: string
          nullable: true
        format:
          type: string

    Music:
      type: object
      properties:
        href:
          type: string
        type:
          type: string
        duration:
          type: integer
          nullable: true
        hash:
          type: string
        heard_in:
          type: array
          items:
            $ref: '#/components/schemas/MusicEntryLink'

    MusicEntryLink:
      type: object
      properties:
        collection:
          type: string
        path:
          type: string
        name:
          type: string
        title:
          type: string
          nullable: true

    LevelMusic:
      type: object
      properties:
        name:
          type: string
        href:
          type: string
        type:
          type: string
        duration:
          type: integer
          nullable: true
        hash:
          type: string

    Entry:
      type: object
      properties:
        collection:
          type: string
        path:
          type: string
        title:
          type: string
          nullable: true
        size:
          type: integer
        timestamp:
          type: string
        game:
          type: string
          nullable: true
        engine:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        tools_used:
          type: string
          nullable: true
        build_time:
          type: string
          nullable: true
        credits:
          type: string
          nullable: true
        known_bugs:
          type: string
          nullable: true
        comments:
          type: string
          nullable: true
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
        levels:
          type: array
          items:
            $ref: '#/components/schemas/LevelTeaser'
        music:
          type: array
          items:
            $ref: '#/components/schemas/LevelMusic'
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'

    EntryTeaser:
      type: object
      properties:
        collection:
          type: string
        path:
          type: string
        title:
          type: string
          nullable: true
        timestamp:
          type: string
        game:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
        level_count:
          type: integer
        image:
          $ref: '#/components/schemas/Image'

    Image:
      type: object
      properties:
        href:
          type: string
        href_thumbnail:
          type: string
        name:
          type: string
        width:
          type: integer
        height:
          type: integer

    Author:
      type: object
      properties:
        name:
          type: string
        full_name:
          type: string
          nullable: true
        nickname:
          type: string
          nullable: true
        path_alias:
          type: string

    Directory:
      type: object
      properties:
        path:
          type: string
        name:
          type: string

    DirectoryListing:
      type: object
      properties:
        directories:
          type: array
          items:
            $ref: '#/components/schemas/Directory'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/EntryTeaser'

paths:
  /latest:
    get:
      description: Returns the latest entries.
      responses:
        '200':
          description: A list of the latest entry teasers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntryTeaser'

  /images/random:
    get:
      description: Returns a small amount of random images.
      responses:
        '200':
          description: A list of random images.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'

  /search:
    get:
      description: Returns entries matching a search query.
      parameters:
        - name: search_key
          in: query
          description: The text to search for.
          schema:
            type: string
          required: true
        - name: search_fields
          in: query
          description: Only search in specific fields.
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [title, description, filename, textfile]
            default: [title, description, filename]
        - name: collection
          in: query
          description: The collection to search in.
          schema:
            type: string
        - name: filter_gameplay
          in: query
          description: Filter by the type of gameplay.
          explode: false
          schema:
            type: string
            enum: [singleplayer, deathmatch, cooperative]
        - name: filter_game
          in: query
          description: Filter by the type of game.
          explode: false
          schema:
            type: string
            enum: [doom, doom2, tnt, plutonia, heretic, hexen]
        - name: sort_field
          in: query
          description: Sort results by a property.
          schema:
            type: string
            enum: [relevance, title, date]
            default: relevance
        - name: sort_order
          in: query
          description: Result sorting order.
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: A list of entry teasers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntryTeaser'

  /entries/{collection}/{entry_path}:
    get:
      description: Returns all information of a single entry.
      parameters:
        - name: collection
          in: path
          description: Name of the collection the entry is in.
          required: true
          schema:
            type: string
        - name: entry_path
          in: path
          description: Path of the entry to return a level from.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Entry information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'

  /levels/{collection}/{entry_path}/{level_name}:
    get:
      description: Returns all information of a single level.
      parameters:
        - name: collection
          in: path
          description: Name of the collection the level is in.
          required: true
          schema:
            type: string
        - name: entry_path
          in: path
          description: Path of the entry to return a level from.
          required: true
          schema:
            type: string
        - name: level_name
          in: path
          description: Lump name of the level to return.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Level information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Level'

  /music/{hash}:
    get:
      description: Returns all information of a single music track.
      parameters:
        - name: hash
          in: path
          description: Hash of the music track to return.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Music information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Music'

  /list/{collection}/{path}:
    get:
      description: Returns all entries and subdirectories of a path.
      parameters:
        - name: collection
          in: path
          description: Name of the collection to list.
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path of the directory listing to return.
          required: true
          schema:
            type: string
        - name: sort_field
          in: query
          description: Sort results by a property.
          schema:
            type: string
            enum: [title, date]
            default: relevance
        - name: sort_order
          in: query
          description: Result sorting order.
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Entries and subdirectories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryListing'

  /authors/{path_alias}:
    get:
      description: Returns all information of a single author.
      parameters:
        - name: path_alias
          in: path
          description: Path alias of the author to return.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Author information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
