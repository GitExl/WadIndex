{"version":3,"sources":["webpack://js-synthesizer/./src/main/MIDIEvent.ts","webpack://js-synthesizer/./src/main/SequencerEventData.ts","webpack://js-synthesizer/./src/main/PointerType.ts","webpack://js-synthesizer/./src/main/ISequencerEventData.ts","webpack://js-synthesizer/./src/main/Sequencer.ts","webpack://js-synthesizer/./src/main/Soundfont.ts","webpack://js-synthesizer/./src/main/Synthesizer.ts","webpack://js-synthesizer/./src/main/MessageError.ts","webpack://js-synthesizer/./src/main/MethodMessaging.ts","webpack://js-synthesizer/./src/main/registerAudioWorkletProcessor.ts","webpack://js-synthesizer/./src/main/waitForReady.ts","webpack://js-synthesizer/./src/main/workletEntry.ts"],"names":["MIDIEvent","_ptr","_module","this","_fluid_midi_event_get_type","value","_fluid_midi_event_set_type","_fluid_midi_event_get_channel","_fluid_midi_event_set_channel","_fluid_midi_event_get_key","_fluid_midi_event_set_key","_fluid_midi_event_get_velocity","_fluid_midi_event_set_velocity","_fluid_midi_event_get_control","_fluid_midi_event_set_control","_fluid_midi_event_get_value","_fluid_midi_event_set_value","_fluid_midi_event_get_program","_fluid_midi_event_set_program","_fluid_midi_event_get_pitch","_fluid_midi_event_set_pitch","data","size","byteLength","ptr","_malloc","Uint8Array","HEAPU8","buffer","set","_fluid_midi_event_set_sysex","_fluid_midi_event_set_text","_fluid_midi_event_set_lyrics","SequencerEventData","_fluid_event_get_type","_fluid_event_get_source","_fluid_event_get_dest","_fluid_event_get_channel","_fluid_event_get_key","_fluid_event_get_velocity","_fluid_event_get_control","_fluid_event_get_value","_fluid_event_get_program","_fluid_event_get_data","_fluid_event_get_duration","_fluid_event_get_bank","_fluid_event_get_pitch","_fluid_event_get_sfont_id","AudioWorkletGlobalScope","wasmModule","Module","rewriteEventDataImpl","ev","event","type","_fluid_event_note","channel","key","vel","duration","_fluid_event_noteon","_fluid_event_noteoff","_fluid_event_all_sounds_off","_fluid_event_all_notes_off","_fluid_event_bank_select","bank","_fluid_event_program_change","preset","_fluid_event_program_select","sfontId","_fluid_event_control_change","control","_fluid_event_pitch_bend","_fluid_event_pitch_wheelsens","_fluid_event_modulation","_fluid_event_sustain","_fluid_event_pan","_fluid_event_volume","_fluid_event_reverb_send","_fluid_event_chorus_send","_fluid_event_key_pressure","_fluid_event_channel_pressure","_fluid_event_system_reset","_fluid_event_timer","_removeFunction","fluid_sequencer_get_client_name","fluid_sfont_get_name","fluid_preset_get_name","_addFunction","_fs","fluid_settings_setint","fluid_settings_setnum","fluid_settings_setstr","fluid_synth_error","fluid_synth_sfload","fluid_sequencer_register_client","malloc","free","defaultMIDIEventCallback","promiseWaitForInitialized","makeEvent","_new_fluid_event","_delete_fluid_event","Sequencer","wasmRemoveFunction","removeFunction","cwrap","_seq","_seqId","_clientFuncMap","close","_new_fluid_sequencer2","Promise","resolve","Object","keys","forEach","clientIdStr","unregisterClient","Number","_delete_fluid_sequencer","synth","val","_fluid_sequencer_unregister_client","Synthesizer","reject","TypeError","getRawSynthesizer","_fluid_sequencer_register_fluidsynth","clientId","_fluid_event_set_source","_fluid_event_set_dest","_fluid_event_unregistering","_fluid_sequencer_send_now","map","c","_fluid_sequencer_count_clients","r","i","id","_fluid_sequencer_get_client_id","name","push","index","scale","_fluid_sequencer_set_time_scale","_fluid_sequencer_get_time_scale","_fluid_sequencer_get_tick","tick","isAbsolute","count","_fluid_sequencer_send_at","eventData","getRaw","_fluid_sequencer_remove_events","msecToProcess","_fluid_sequencer_process","msec","setInterval","processSequencer","Soundfont","sfontPtr","sfont","_fluid_synth_get_sfont_by_id","presetNum","presetPtr","_fluid_sfont_get_preset","soundfont","bankNum","_fluid_preset_get_banknum","num","_fluid_preset_get_num","reset","_fluid_sfont_iteration_start","next","_fluid_sfont_iteration_next","done","undefined","Symbol","iterator","wasmAddFunction","addFunction","FS","bind","_free","_fluid_synth_handle_midi_event","setBoolValueForSettings","settings","setIntValueForSettings","setNumValueForSettings","_settings","_synth","_player","_playerPlaying","_playerCallbackPtr","_fluidSynthCallback","_buffer","_bufferSize","_numPtr","_gain","mod","addOnPostRunFn","addOnPostRun","calledRun","fn","onRuntimeInitialized","waitForInitialized","context","frameSize","node","createScriptProcessor","addEventListener","render","outputBuffer","sampleRate","_new_fluid_settings","initialGain","chorusActive","chorusDepth","chorusLevel","chorusNr","chorusSpeed","midiChannelCount","setStrValueForSettings","midiBankSelect","minNoteLength","overflowAge","overflowImportantValue","overflowImportantChannels","join","overflowPercussion","overflowReleased","overflowSustained","overflowVolume","polyphony","reverbActive","reverbDamp","reverbLevel","reverbRoomSize","reverbWidth","_new_fluid_synth","_closePlayer","_delete_fluid_synth","_delete_fluid_settings","actualCount","_fluid_synth_get_active_voice_count","baseOffsetOfVoice","offsetOfActiveVoiceCount","structActiveVoiceCount","HEAPU32","console","warn","voiceList","voiceCount","_fluid_synth_get_polyphony","isRunning","voice","getActiveVoiceCount","ensureInitialized","_fluid_synth_set_interp_method","gain","_fluid_synth_set_gain","_fluid_synth_get_gain","isDrum","_fluid_synth_set_channel_type","flushFramesAsync","bin","ext","Math","random","ub","writeFile","unlink","Error","stopPlayer","flushFramesSync","_fluid_synth_sfunload","then","getSoundfontById","_fluid_synth_get_bank_offset","offset","_fluid_synth_set_bank_offset","outBuffer","frameCount","length","channels","numberOfChannels","sizePerChannel","totalSize","memLeft","memRight","renderRaw","aLeft","Float32Array","aRight","copyToChannel","leftData","getChannelData","rightData","isPlayerPlaying","chan","_fluid_synth_noteon","_fluid_synth_noteoff","_fluid_synth_key_pressure","ctrl","_fluid_synth_cc","prognum","_fluid_synth_program_change","_fluid_synth_channel_pressure","_fluid_synth_pitch_bend","len","mem","_fluid_synth_sysex","_fluid_synth_pitch_wheel_sens","_fluid_synth_bank_select","_fluid_synth_sfont_select","_fluid_synth_program_select","_fluid_synth_unset_program","_fluid_synth_program_reset","_fluid_synth_system_reset","_fluid_synth_all_notes_off","_fluid_synth_all_sounds_off","roomsize","damping","width","level","_fluid_synth_set_reverb","_fluid_synth_set_reverb_roomsize","_fluid_synth_set_reverb_damp","_fluid_synth_set_reverb_width","_fluid_synth_set_reverb_level","on","_fluid_synth_set_reverb_on","_fluid_synth_get_reverb_roomsize","_fluid_synth_get_reverb_damp","_fluid_synth_get_reverb_level","_fluid_synth_get_reverb_width","speed","depthMillisec","_fluid_synth_set_chorus","_fluid_synth_set_chorus_nr","_fluid_synth_set_chorus_level","_fluid_synth_set_chorus_speed","_fluid_synth_set_chorus_depth","_fluid_synth_set_chorus_type","_fluid_synth_set_chorus_on","_fluid_synth_get_chorus_nr","_fluid_synth_get_chorus_level","_fluid_synth_get_chorus_speed","_fluid_synth_get_chorus_depth","_fluid_synth_get_chorus_type","param","_fluid_synth_get_gen","_fluid_synth_set_gen","_fluid_synth_get_legato_mode","HEAP32","mode","_fluid_synth_set_legato_mode","_fluid_synth_get_portamento_mode","_fluid_synth_set_portamento_mode","_fluid_synth_get_breath_mode","flags","_fluid_synth_set_breath_mode","_initPlayer","player","_new_fluid_player","funcPtr","p","_delete_fluid_player","_fluid_player_get_status","ensurePlayerInitialized","_fluid_player_add_mem","_fluid_player_play","resolver","_playerDefer","promise","_fluid_player_stop","_fluid_player_join","_fluid_player_get_current_tick","_fluid_player_get_total_ticks","_fluid_player_get_bpm","_fluid_player_get_midi_tempo","ticks","_fluid_player_seek","callback","oldPtr","newPtr","cb","t","makeMIDIEventCallback","_fluid_player_set_playback_callback","_fluid_synth_write_float","isPlaying","nextFrame","setTimeout","head","tail","self","seq","_initialize","time","e","sendEventToClientNow","sendEventNow","setIntervalForSequencer","convertAnyErrorTransferable","err","result","objList","obj","prototype","unshift","getPrototypeOf","o","getOwnPropertyNames","_e","baseName","message","detail","convertErrorTransferable","initializeReturnPort","port","promiseInitialized","targetObjectHolder","hookMessage","instance","processCallMessage","start","hook","target","method","postReturnImpl","apply","args","postReturnErrorImpl","postReturn","v","postMessage","error","postReturnError","promiseWasmInitialized","waitForWasmInitialized","JSSynth","rewriteEventData","Fluid","Processor","AudioWorkletProcessor","options","super","processorOptions","doInit","_messaging","init","doCreateSequencer","doHookPlayerMIDIEvents","doCallFunction","doGetSFontObject","doPlayPlayer","createSequencer","messaging","doRegisterSequencerClient","getSFontObject","getPresetIterable","getName","syn","playPlayer","playing","playerPlaying","hookPlayerMIDIEvents","call","clientName","callbackName","registerSequencerClient","_inputs","outputs","registerProcessor","registerAudioWorkletProcessor"],"mappings":"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","file":"js-synthesizer.worklet.min.js","sourcesContent":["\nimport IMIDIEvent from './IMIDIEvent';\nimport PointerType, { UniquePointerType } from './PointerType';\n\n/** @internal */\nexport type MIDIEventType = UniquePointerType<'midi_event'>;\n\n/** @internal */\nexport default class MIDIEvent implements IMIDIEvent {\n\n\t/** @internal */\n\tconstructor(private _ptr: MIDIEventType, private _module: any) {\n\t}\n\n\tpublic getType(): number {\n\t\treturn this._module._fluid_midi_event_get_type(this._ptr);\n\t}\n\tpublic setType(value: number): void {\n\t\tthis._module._fluid_midi_event_set_type(this._ptr, value);\n\t}\n\tpublic getChannel(): number {\n\t\treturn this._module._fluid_midi_event_get_channel(this._ptr);\n\t}\n\tpublic setChannel(value: number): void {\n\t\tthis._module._fluid_midi_event_set_channel(this._ptr, value);\n\t}\n\tpublic getKey(): number {\n\t\treturn this._module._fluid_midi_event_get_key(this._ptr);\n\t}\n\tpublic setKey(value: number): void {\n\t\tthis._module._fluid_midi_event_set_key(this._ptr, value);\n\t}\n\tpublic getVelocity(): number {\n\t\treturn this._module._fluid_midi_event_get_velocity(this._ptr);\n\t}\n\tpublic setVelocity(value: number): void {\n\t\tthis._module._fluid_midi_event_set_velocity(this._ptr, value);\n\t}\n\tpublic getControl(): number {\n\t\treturn this._module._fluid_midi_event_get_control(this._ptr);\n\t}\n\tpublic setControl(value: number): void {\n\t\tthis._module._fluid_midi_event_set_control(this._ptr, value);\n\t}\n\tpublic getValue(): number {\n\t\treturn this._module._fluid_midi_event_get_value(this._ptr);\n\t}\n\tpublic setValue(value: number): void {\n\t\tthis._module._fluid_midi_event_set_value(this._ptr, value);\n\t}\n\tpublic getProgram(): number {\n\t\treturn this._module._fluid_midi_event_get_program(this._ptr);\n\t}\n\tpublic setProgram(value: number): void {\n\t\tthis._module._fluid_midi_event_set_program(this._ptr, value);\n\t}\n\tpublic getPitch(): number {\n\t\treturn this._module._fluid_midi_event_get_pitch(this._ptr);\n\t}\n\tpublic setPitch(value: number): void {\n\t\tthis._module._fluid_midi_event_set_pitch(this._ptr, value);\n\t}\n\n\tpublic setSysEx(data: Uint8Array): void {\n\t\tconst size = data.byteLength;\n\t\tconst ptr: PointerType = this._module._malloc(size);\n\t\tconst ptrView = new Uint8Array(this._module.HEAPU8.buffer, ptr, size);\n\t\tptrView.set(data);\n\t\tthis._module._fluid_midi_event_set_sysex(this._ptr, ptr, size, 1);\n\t}\n\tpublic setText(data: Uint8Array): void {\n\t\tconst size = data.byteLength;\n\t\tconst ptr: PointerType = this._module._malloc(size);\n\t\tconst ptrView = new Uint8Array(this._module.HEAPU8.buffer, ptr, size);\n\t\tptrView.set(data);\n\t\tthis._module._fluid_midi_event_set_text(this._ptr, ptr, size, 1);\n\t}\n\tpublic setLyrics(data: Uint8Array): void {\n\t\tconst size = data.byteLength;\n\t\tconst ptr: PointerType = this._module._malloc(size);\n\t\tconst ptrView = new Uint8Array(this._module.HEAPU8.buffer, ptr, size);\n\t\tptrView.set(data);\n\t\tthis._module._fluid_midi_event_set_lyrics(this._ptr, ptr, size, 1);\n\t}\n}\n","\nimport { EventType } from './SequencerEvent';\nimport ISequencerEventData from './ISequencerEventData';\nimport PointerType, { INVALID_POINTER } from './PointerType';\n\n/** @internal */\nexport default class SequencerEventData implements ISequencerEventData {\n\t/** @internal */\n\tconstructor(private _ptr: PointerType, private _module: any) {\n\t}\n\n\t/** @internal */\n\tpublic getRaw() {\n\t\treturn this._ptr;\n\t}\n\n\t/** @internal */\n\tpublic dispose() {\n\t\tthis._ptr = INVALID_POINTER;\n\t}\n\n\tpublic getType(): EventType {\n\t\tif (this._ptr === INVALID_POINTER) return -1 as any as EventType;\n\t\treturn this._module._fluid_event_get_type(this._ptr);\n\t}\n\tpublic getSource(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_source(this._ptr);\n\t}\n\tpublic getDest(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_dest(this._ptr);\n\t}\n\tpublic getChannel(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_channel(this._ptr);\n\t}\n\tpublic getKey(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_key(this._ptr);\n\t}\n\tpublic getVelocity(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_velocity(this._ptr);\n\t}\n\tpublic getControl(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_control(this._ptr);\n\t}\n\tpublic getValue(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_value(this._ptr);\n\t}\n\tpublic getProgram(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_program(this._ptr);\n\t}\n\tpublic getData(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_data(this._ptr);\n\t}\n\tpublic getDuration(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_duration(this._ptr);\n\t}\n\tpublic getBank(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_bank(this._ptr);\n\t}\n\tpublic getPitch(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_pitch(this._ptr);\n\t}\n\tpublic getSFontId(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_sfont_id(this._ptr);\n\t}\n}\n","\ntype NullPointerType = number & { _null_pointer_marker: never; };\n\n/** @internal */\ntype PointerType = NullPointerType | (number & { _pointer_marker: never; });\n\nexport default PointerType;\n\ntype UniquePointerType<TMarker extends string> = NullPointerType | (number & {\n\t_pointer_marker: never;\n} & {\n\t[P in TMarker]: never;\n});\nexport { UniquePointerType };\n\nexport const INVALID_POINTER: NullPointerType = 0 as any as NullPointerType;\n","\nimport SequencerEvent, { EventType } from './SequencerEvent';\n\n/** @internal */\nimport PointerType, { INVALID_POINTER } from './PointerType';\n/** @internal */\nimport SequencerEventData from './SequencerEventData';\n\nconst _module: any = typeof AudioWorkletGlobalScope !== 'undefined' ?\n\tAudioWorkletGlobalScope.wasmModule : Module;\n\n/** Event data for sequencer callback. Only available in the callback function due to the instance lifetime. */\nexport default interface ISequencerEventData {\n\t/** Returns the event type */\n\tgetType(): EventType;\n\t/** Returns the source client id of event */\n\tgetSource(): number;\n\t/** Returns the destination client id of event */\n\tgetDest(): number;\n\tgetChannel(): number;\n\tgetKey(): number;\n\tgetVelocity(): number;\n\tgetControl(): number;\n\tgetValue(): number;\n\tgetProgram(): number;\n\tgetData(): number;\n\tgetDuration(): number;\n\tgetBank(): number;\n\tgetPitch(): number;\n\tgetSFontId(): number;\n}\n\n/** @internal */\nexport function rewriteEventDataImpl(ev: PointerType, event: SequencerEvent): boolean {\n\tswitch (event.type) {\n\t\tcase EventType.Note:\n\t\tcase 'note':\n\t\t\t_module._fluid_event_note(ev, event.channel, event.key, event.vel, event.duration);\n\t\t\tbreak;\n\t\tcase EventType.NoteOn:\n\t\tcase 'noteon':\n\t\tcase 'note-on':\n\t\t\t_module._fluid_event_noteon(ev, event.channel, event.key, event.vel);\n\t\t\tbreak;\n\t\tcase EventType.NoteOff:\n\t\tcase 'noteoff':\n\t\tcase 'note-off':\n\t\t\t_module._fluid_event_noteoff(ev, event.channel, event.key);\n\t\t\tbreak;\n\t\tcase EventType.AllSoundsOff:\n\t\tcase 'allsoundsoff':\n\t\tcase 'all-sounds-off':\n\t\t\t_module._fluid_event_all_sounds_off(ev, event.channel);\n\t\t\tbreak;\n\t\tcase EventType.AllNotesOff:\n\t\tcase 'allnotesoff':\n\t\tcase 'all-notes-off':\n\t\t\t_module._fluid_event_all_notes_off(ev, event.channel);\n\t\t\tbreak;\n\t\tcase EventType.BankSelect:\n\t\tcase 'bankselect':\n\t\tcase 'bank-select':\n\t\t\t_module._fluid_event_bank_select(ev, event.channel, event.bank);\n\t\t\tbreak;\n\t\tcase EventType.ProgramChange:\n\t\tcase 'programchange':\n\t\tcase 'program-change':\n\t\t\t_module._fluid_event_program_change(ev, event.channel, event.preset);\n\t\t\tbreak;\n\t\tcase EventType.ProgramSelect:\n\t\tcase 'programselect':\n\t\tcase 'program-select':\n\t\t\t_module._fluid_event_program_select(ev, event.channel, event.sfontId, event.bank, event.preset);\n\t\t\tbreak;\n\t\tcase EventType.ControlChange:\n\t\tcase 'controlchange':\n\t\tcase 'control-change':\n\t\t\t_module._fluid_event_control_change(ev, event.channel, event.control, event.value);\n\t\t\tbreak;\n\t\tcase EventType.PitchBend:\n\t\tcase 'pitchbend':\n\t\tcase 'pitch-bend':\n\t\t\t_module._fluid_event_pitch_bend(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.PitchWheelSensitivity:\n\t\tcase 'pitchwheelsens':\n\t\tcase 'pitchwheelsensitivity':\n\t\tcase 'pitch-wheel-sens':\n\t\tcase 'pitch-wheel-sensitivity':\n\t\t\t_module._fluid_event_pitch_wheelsens(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Modulation:\n\t\tcase 'modulation':\n\t\t\t_module._fluid_event_modulation(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Sustain:\n\t\tcase 'sustain':\n\t\t\t_module._fluid_event_sustain(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Pan:\n\t\tcase 'pan':\n\t\t\t_module._fluid_event_pan(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Volume:\n\t\tcase 'volume':\n\t\t\t_module._fluid_event_volume(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.ReverbSend:\n\t\tcase 'reverb':\n\t\tcase 'reverbsend':\n\t\tcase 'reverb-send':\n\t\t\t_module._fluid_event_reverb_send(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.ChorusSend:\n\t\tcase 'chorus':\n\t\tcase 'chorussend':\n\t\tcase 'chorus-send':\n\t\t\t_module._fluid_event_chorus_send(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.KeyPressure:\n\t\tcase 'keypressure':\n\t\tcase 'key-pressure':\n\t\tcase 'aftertouch':\n\t\t\t_module._fluid_event_key_pressure(ev, event.channel, event.key, event.value);\n\t\t\tbreak;\n\t\tcase EventType.ChannelPressure:\n\t\tcase 'channelpressure':\n\t\tcase 'channel-pressure':\n\t\tcase 'channel-aftertouch':\n\t\t\t_module._fluid_event_channel_pressure(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.SystemReset:\n\t\tcase 'systemreset':\n\t\tcase 'system-reset':\n\t\t\t_module._fluid_event_system_reset(ev);\n\t\t\tbreak;\n\t\tcase EventType.Timer:\n\t\tcase 'timer':\n\t\t\t_module._fluid_event_timer(ev, event.data);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// 'typeof event' must be 'never' here\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * Rewrites event data with specified SequencerEvent object.\n * @param data destination instance\n * @param event source data\n * @return true if succeeded\n */\nexport function rewriteEventData(data: ISequencerEventData, event: SequencerEvent): boolean {\n\tif (!data || !(data instanceof SequencerEventData)) {\n\t\treturn false;\n\t}\n\tconst ev = data.getRaw();\n\tif (ev === INVALID_POINTER) {\n\t\treturn false;\n\t}\n\treturn rewriteEventDataImpl(ev, event);\n}\n","\nimport ISequencer, { ClientInfo } from './ISequencer';\nimport ISequencerEventData, { rewriteEventDataImpl } from './ISequencerEventData';\nimport ISynthesizer from './ISynthesizer';\nimport PointerType, { INVALID_POINTER, UniquePointerType } from './PointerType';\nimport SequencerEvent from './SequencerEvent';\nimport SequencerEventData from './SequencerEventData';\n\nimport Synthesizer from './Synthesizer';\n\ntype SequencerPointer = UniquePointerType<'sequencer_ptr'>;\ntype SequencerId = number;\n\n/** @internal */\ndeclare global {\n\tvar Module: any;\n\tfunction removeFunction(funcPtr: number): void;\n}\n\nlet _module: any;\nlet _removeFunction: (funcPtr: number) => void;\n\nlet fluid_sequencer_get_client_name: (seq: number, id: number) => string;\n\nfunction bindFunctions() {\n\tif (_module) {\n\t\treturn;\n\t}\n\n\tif (typeof AudioWorkletGlobalScope !== 'undefined') {\n\t\t_module = AudioWorkletGlobalScope.wasmModule;\n\t\t_removeFunction = AudioWorkletGlobalScope.wasmRemoveFunction;\n\t} else {\n\t\t_module = Module;\n\t\t_removeFunction = removeFunction;\n\t}\n\n\tfluid_sequencer_get_client_name =\n\t\t_module.cwrap('fluid_sequencer_get_client_name', 'string', ['number', 'number']);\n}\n\nfunction makeEvent(event: SequencerEvent): PointerType | null {\n\tconst ev = _module._new_fluid_event();\n\tif (!rewriteEventDataImpl(ev, event)) {\n\t\t_module._delete_fluid_event(ev);\n\t\treturn null;\n\t}\n\treturn ev;\n}\n\n/** @internal */\nexport default class Sequencer implements ISequencer {\n\n\tprivate _seq: SequencerPointer;\n\tprivate _seqId: SequencerId;\n\n\t/** @internal */\n\tpublic _clientFuncMap: { [id: number]: number };\n\n\tconstructor() {\n\t\tbindFunctions();\n\n\t\tthis._seq = INVALID_POINTER;\n\t\tthis._seqId = -1;\n\t\tthis._clientFuncMap = {};\n\t}\n\n\t/** @internal */\n\tpublic _initialize(): Promise<void> {\n\t\tthis.close();\n\t\tthis._seq = _module._new_fluid_sequencer2(0);\n\t\tthis._seqId = -1;\n\t\treturn Promise.resolve();\n\t}\n\n\t/** @internal */\n\tpublic getRaw() {\n\t\treturn this._seq;\n\t}\n\n\tpublic close() {\n\t\tif (this._seq !== INVALID_POINTER) {\n\t\t\tObject.keys(this._clientFuncMap).forEach((clientIdStr) => {\n\t\t\t\tthis.unregisterClient(Number(clientIdStr));\n\t\t\t});\n\t\t\tthis.unregisterClient(-1);\n\t\t\t_module._delete_fluid_sequencer(this._seq);\n\t\t\tthis._seq = INVALID_POINTER;\n\t\t}\n\t}\n\n\tpublic registerSynthesizer(synth: ISynthesizer | number): Promise<number> {\n\t\tif (this._seqId !== -1) {\n\t\t\t_module._fluid_sequencer_unregister_client(this._seq, this._seqId);\n\t\t\tthis._seqId = -1;\n\t\t}\n\t\tlet val: number;\n\t\tif (typeof synth === 'number') {\n\t\t\tval = synth;\n\t\t} else if (synth instanceof Synthesizer) {\n\t\t\tval = synth.getRawSynthesizer();\n\t\t} else {\n\t\t\treturn Promise.reject(new TypeError('\\'synth\\' is not a compatible type instance'));\n\t\t}\n\n\t\tthis._seqId = _module._fluid_sequencer_register_fluidsynth(this._seq, val);\n\t\treturn Promise.resolve(this._seqId);\n\t}\n\n\tpublic unregisterClient(clientId: number): void {\n\t\tif (clientId === -1) {\n\t\t\tclientId = this._seqId;\n\t\t\tif (clientId === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// send 'unregistering' event\n\t\tconst ev = _module._new_fluid_event();\n\t\t_module._fluid_event_set_source(ev, -1);\n\t\t_module._fluid_event_set_dest(ev, clientId);\n\t\t_module._fluid_event_unregistering(ev);\n\t\t_module._fluid_sequencer_send_now(this._seq, ev);\n\t\t_module._delete_fluid_event(ev);\n\n\t\t_module._fluid_sequencer_unregister_client(this._seq, clientId);\n\t\tif (this._seqId === clientId) {\n\t\t\tthis._seqId = -1;\n\t\t} else {\n\t\t\tconst map = this._clientFuncMap;\n\t\t\tif (map[clientId]) {\n\t\t\t\t_removeFunction(map[clientId]);\n\t\t\t\tdelete map[clientId];\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getAllRegisteredClients(): Promise<ClientInfo[]> {\n\t\tconst c = _module._fluid_sequencer_count_clients(this._seq);\n\t\tconst r: ClientInfo[] = [];\n\t\tfor (let i = 0; i < c; ++i) {\n\t\t\tconst id = _module._fluid_sequencer_get_client_id(this._seq, i);\n\t\t\tconst name = fluid_sequencer_get_client_name(this._seq, id);\n\t\t\tr.push({ clientId: id, name: name });\n\t\t}\n\t\treturn Promise.resolve(r);\n\t}\n\n\tpublic getClientCount(): Promise<number> {\n\t\treturn Promise.resolve<number>(_module._fluid_sequencer_count_clients(this._seq));\n\t}\n\n\tpublic getClientInfo(index: number): Promise<ClientInfo> {\n\t\tconst id = _module._fluid_sequencer_get_client_id(this._seq, index);\n\t\tconst name = fluid_sequencer_get_client_name(this._seq, id);\n\t\treturn Promise.resolve<ClientInfo>({ clientId: id, name: name });\n\t}\n\n\tpublic setTimeScale(scale: number): void {\n\t\t_module._fluid_sequencer_set_time_scale(this._seq, scale);\n\t}\n\n\tpublic getTimeScale(): Promise<number> {\n\t\treturn Promise.resolve(_module._fluid_sequencer_get_time_scale(this._seq));\n\t}\n\n\tpublic getTick(): Promise<number> {\n\t\treturn Promise.resolve(_module._fluid_sequencer_get_tick(this._seq));\n\t}\n\n\tpublic sendEventAt(event: SequencerEvent, tick: number, isAbsolute: boolean): void {\n\t\tconst ev = makeEvent(event);\n\t\tif (ev !== null) {\n\t\t\t// send to all clients\n\t\t\tconst count = _module._fluid_sequencer_count_clients(this._seq);\n\t\t\tfor (let i = 0; i < count; ++i) {\n\t\t\t\tconst id: number = _module._fluid_sequencer_get_client_id(this._seq, i);\n\t\t\t\t_module._fluid_event_set_dest(ev, id);\n\t\t\t\t_module._fluid_sequencer_send_at(this._seq, ev, tick, isAbsolute ? 1 : 0);\n\t\t\t}\n\t\t\t_module._delete_fluid_event(ev);\n\t\t}\n\t}\n\n\tpublic sendEventToClientAt(clientId: number, event: SequencerEvent, tick: number, isAbsolute: boolean): void {\n\t\tconst ev = makeEvent(event);\n\t\tif (ev !== null) {\n\t\t\t_module._fluid_event_set_dest(ev, clientId === -1 ? this._seqId : clientId);\n\t\t\t_module._fluid_sequencer_send_at(this._seq, ev, tick, isAbsolute ? 1 : 0);\n\t\t\t_module._delete_fluid_event(ev);\n\t\t}\n\t}\n\n\t/** @internal */\n\tpublic sendEventToClientNow(clientId: number, event: SequencerEvent): void {\n\t\tconst ev = makeEvent(event);\n\t\tif (ev !== null) {\n\t\t\t_module._fluid_event_set_dest(ev, clientId === -1 ? this._seqId : clientId);\n\t\t\t_module._fluid_sequencer_send_now(this._seq, ev);\n\t\t\t_module._delete_fluid_event(ev);\n\t\t}\n\t}\n\n\t/** @internal */\n\tpublic sendEventNow(clientId: number, eventData: ISequencerEventData): void {\n\t\tif (!(eventData instanceof SequencerEventData)) {\n\t\t\treturn;\n\t\t}\n\t\tconst ev = eventData.getRaw();\n\t\tif (ev !== INVALID_POINTER) {\n\t\t\t_module._fluid_event_set_dest(ev, clientId === -1 ? this._seqId : clientId);\n\t\t\t_module._fluid_sequencer_send_now(this._seq, ev);\n\t\t}\n\t}\n\n\tpublic removeAllEvents(): void {\n\t\t_module._fluid_sequencer_remove_events(this._seq, -1, -1, -1);\n\t}\n\n\tpublic removeAllEventsFromClient(clientId: number): void {\n\t\t_module._fluid_sequencer_remove_events(this._seq, -1, clientId === -1 ? this._seqId : clientId, -1);\n\t}\n\n\tpublic processSequencer(msecToProcess: number) {\n\t\tif (this._seq !== INVALID_POINTER) {\n\t\t\t_module._fluid_sequencer_process(this._seq, msecToProcess);\n\t\t}\n\t}\n\n\t/** @internal */\n\tpublic setIntervalForSequencer(msec: number) {\n\t\treturn setInterval(() => this.processSequencer(msec), msec);\n\t}\n}\n","import { INVALID_POINTER, UniquePointerType } from './PointerType';\nimport Preset from './Preset';\nimport Synthesizer from './Synthesizer';\n\ntype SFontPointer = UniquePointerType<'sfont_ptr'>;\ntype PresetPointer = UniquePointerType<'preset_ptr'>;\n\n/** @internal */\ndeclare global {\n\tvar Module: any;\n}\n\nlet _module: any;\n\nlet fluid_sfont_get_name: (sfont: SFontPointer) => string;\nlet fluid_preset_get_name: (preset: PresetPointer) => string;\n\nfunction bindFunctions() {\n\tif (_module) {\n\t\treturn;\n\t}\n\n\tif (typeof AudioWorkletGlobalScope !== 'undefined') {\n\t\t_module = AudioWorkletGlobalScope.wasmModule;\n\t} else {\n\t\t_module = Module;\n\t}\n\n\tfluid_sfont_get_name =\n\t\t_module.cwrap('fluid_sfont_get_name', 'string', ['number']);\n\tfluid_preset_get_name =\n\t\t_module.cwrap('fluid_preset_get_name', 'string', ['number']);\n}\n\nexport default class Soundfont {\n\tprivate readonly _ptr: SFontPointer;\n\n\t// @internal\n\tpublic constructor(sfontPtr: SFontPointer) {\n\t\tthis._ptr = sfontPtr;\n\t}\n\n\tpublic static getSoundfontById(synth: Synthesizer, id: number): Soundfont | null {\n\t\tbindFunctions();\n\n\t\tconst sfont = _module._fluid_synth_get_sfont_by_id(synth.getRawSynthesizer(), id);\n\t\tif (sfont === INVALID_POINTER) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new Soundfont(sfont);\n\t}\n\n\tpublic getName(): string {\n\t\treturn fluid_sfont_get_name(this._ptr);\n\t}\n\n\tpublic getPreset(bank: number, presetNum: number): Preset | null {\n\t\tconst presetPtr: PresetPointer = _module._fluid_sfont_get_preset(this._ptr, bank, presetNum);\n\t\tif (presetPtr === INVALID_POINTER) {\n\t\t\treturn null;\n\t\t}\n\t\tconst name = fluid_preset_get_name(presetPtr);\n\t\tconst bankNum = _module._fluid_preset_get_banknum(presetPtr);\n\t\tconst num = _module._fluid_preset_get_num(presetPtr);\n\t\treturn {\n\t\t\tsoundfont: this,\n\t\t\tname,\n\t\t\tbankNum,\n\t\t\tnum\n\t\t};\n\t}\n\n\tpublic getPresetIterable(): Iterable<Preset> {\n\t\tconst reset = () => {\n\t\t\t_module._fluid_sfont_iteration_start(this._ptr);\n\t\t};\n\t\tconst next = (): IteratorResult<Preset, void> => {\n\t\t\tconst presetPtr = _module._fluid_sfont_iteration_next(this._ptr);\n\t\t\tif (presetPtr === 0) {\n\t\t\t\treturn {\n\t\t\t\t\tdone: true,\n\t\t\t\t\tvalue: undefined\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconst name = fluid_preset_get_name(presetPtr);\n\t\t\t\tconst bankNum = _module._fluid_preset_get_banknum(presetPtr);\n\t\t\t\tconst num = _module._fluid_preset_get_num(presetPtr);\n\t\t\t\treturn {\n\t\t\t\t\tdone: false,\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tsoundfont: this,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tbankNum,\n\t\t\t\t\t\tnum\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tconst iterator = (): Iterator<Preset> => {\n\t\t\treset();\n\t\t\treturn {\n\t\t\t\tnext,\n\t\t\t};\n\t\t};\n\t\treturn {\n\t\t\t[Symbol.iterator]: iterator,\n\t\t};\n\t}\n}\n","\nimport {\n\tSynthesizerDefaultValues,\n\tInterpolationValues,\n\tChorusModulation,\n\tGeneratorTypes,\n\tLegatoMode,\n\tPortamentoMode\n} from './Constants';\nimport IMIDIEvent from './IMIDIEvent';\nimport ISequencer from './ISequencer';\nimport ISequencerEventData from './ISequencerEventData';\nimport ISynthesizer from './ISynthesizer';\nimport PointerType, { INVALID_POINTER, UniquePointerType } from './PointerType';\nimport SynthesizerSettings from './SynthesizerSettings';\n\nimport MIDIEvent, { MIDIEventType } from './MIDIEvent';\nimport Sequencer from './Sequencer';\nimport SequencerEvent, { EventType as SequencerEventType } from './SequencerEvent';\nimport SequencerEventData from './SequencerEventData';\nimport Soundfont from './Soundfont';\n\n/** @internal */\ndeclare global {\n\tvar Module: any;\n\tfunction addFunction(func: Function, sig: string): number;\n\tfunction removeFunction(funcPtr: number): void;\n\tfunction addOnPostRun(cb: (Module: any) => void): void;\n}\n\ntype SettingsId = UniquePointerType<'settings_id'>;\ntype SynthId = UniquePointerType<'synth_id'>;\ntype PlayerId = UniquePointerType<'player_id'>;\n\nlet _module: any;\nlet _addFunction: (func: Function, sig: string) => number;\nlet _removeFunction: (funcPtr: number) => void;\nlet _fs: any;\n\n// wrapper to use String type\nlet fluid_settings_setint: (settings: SettingsId, name: string, val: number) => number;\nlet fluid_settings_setnum: (settings: SettingsId, name: string, val: number) => number;\nlet fluid_settings_setstr: (settings: SettingsId, name: string, str: string) => number;\nlet fluid_synth_error: undefined | ((synth: SynthId) => string);\nlet fluid_synth_sfload: (synth: SynthId, filename: string, reset_presets: number) => number;\nlet fluid_sequencer_register_client: (seq: PointerType, name: string, callback: number, data: number) => number;\n\nlet malloc: (size: number) => PointerType;\nlet free: (ptr: PointerType) => void;\n\nlet defaultMIDIEventCallback: (data: PointerType, event: MIDIEventType) => number;\n\nfunction bindFunctions() {\n\tif (fluid_synth_error) {\n\t\t// (already bound)\n\t\treturn;\n\t}\n\n\tif (typeof AudioWorkletGlobalScope !== 'undefined') {\n\t\t_module = AudioWorkletGlobalScope.wasmModule;\n\t\t_addFunction = AudioWorkletGlobalScope.wasmAddFunction;\n\t\t_removeFunction = AudioWorkletGlobalScope.wasmRemoveFunction;\n\t} else {\n\t\t_module = Module;\n\t\t_addFunction = addFunction;\n\t\t_removeFunction = removeFunction;\n\t}\n\t_fs = _module.FS;\n\n\t// wrapper to use String type\n\tfluid_settings_setint =\n\t\t_module.cwrap('fluid_settings_setint', 'number', ['number', 'string', 'number']);\n\tfluid_settings_setnum =\n\t\t_module.cwrap('fluid_settings_setnum', 'number', ['number', 'string', 'number']);\n\tfluid_settings_setstr =\n\t\t_module.cwrap('fluid_settings_setstr', 'number', ['number', 'string', 'string']);\n\tfluid_synth_error =\n\t\t_module.cwrap('fluid_synth_error', 'string', ['number']);\n\tfluid_synth_sfload =\n\t\t_module.cwrap('fluid_synth_sfload', 'number', ['number', 'string', 'number']);\n\tfluid_sequencer_register_client =\n\t\t_module.cwrap('fluid_sequencer_register_client', 'number', ['number', 'string', 'number', 'number']);\n\n\tmalloc = _module._malloc.bind(_module);\n\tfree = _module._free.bind(_module);\n\n\tdefaultMIDIEventCallback = _module._fluid_synth_handle_midi_event.bind(_module);\n}\n\nlet promiseWaitForInitialized: Promise<void> | undefined;\nfunction waitForInitialized() {\n\tif (promiseWaitForInitialized) {\n\t\treturn promiseWaitForInitialized;\n\t}\n\n\tlet mod: any;\n\tlet addOnPostRunFn: ((cb: (Module: any) => void) => void) | undefined;\n\tif (typeof AudioWorkletGlobalScope !== 'undefined') {\n\t\tmod = AudioWorkletGlobalScope.wasmModule;\n\t\taddOnPostRunFn = AudioWorkletGlobalScope.addOnPostRun;\n\t} else {\n\t\tmod = Module;\n\t\taddOnPostRunFn = typeof addOnPostRun !== 'undefined' ? addOnPostRun : undefined;\n\t}\n\tif (mod.calledRun) {\n\t\tpromiseWaitForInitialized = Promise.resolve();\n\t\treturn promiseWaitForInitialized;\n\t}\n\tif (typeof addOnPostRunFn === 'undefined') {\n\t\tpromiseWaitForInitialized = new Promise((resolve) => {\n\t\t\tconst fn: (() => void) | undefined = _module.onRuntimeInitialized;\n\t\t\t_module.onRuntimeInitialized = () => {\n\t\t\t\tresolve();\n\t\t\t\tif (fn) {\n\t\t\t\t\tfn();\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t} else {\n\t\tpromiseWaitForInitialized = new Promise((resolve) => {\n\t\t\taddOnPostRunFn!(resolve);\n\t\t});\n\t}\n\treturn promiseWaitForInitialized;\n}\n\nfunction setBoolValueForSettings(settings: SettingsId, name: string, value: boolean | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setint(settings, name, value ? 1 : 0);\n\t}\n}\nfunction setIntValueForSettings(settings: SettingsId, name: string, value: number | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setint(settings, name, value);\n\t}\n}\nfunction setNumValueForSettings(settings: SettingsId, name: string, value: number | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setnum(settings, name, value);\n\t}\n}\nfunction setStrValueForSettings(settings: SettingsId, name: string, value: string | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setstr(settings, name, value);\n\t}\n}\n\nfunction getActiveVoiceCount(synth: SynthId): number {\n\tconst actualCount = _module._fluid_synth_get_active_voice_count(synth);\n\tif (!actualCount) {\n\t\treturn 0;\n\t}\n\n\t// FluidSynth may return incorrect value for active voice count,\n\t// so check internal data and correct it\n\n\t// check if the structure is not changed\n\t// for fluidsynth 2.0.x-2.1.x:\n\t//   140 === offset [synth->voice]\n\t//   144 === offset [synth->active_voice_count] for \n\t// for fluidsynth 2.2.x:\n\t//   144 === offset [synth->voice]\n\t//   148 === offset [synth->active_voice_count]\n\t// first check 2.1.x structure\n\tlet baseOffsetOfVoice = 140;\n\tlet offsetOfActiveVoiceCount = (synth + baseOffsetOfVoice + 4) >> 2;\n\tlet structActiveVoiceCount = _module.HEAPU32[offsetOfActiveVoiceCount];\n\tif (structActiveVoiceCount !== actualCount) {\n\t\t// add 4 for 2.2.x\n\t\tbaseOffsetOfVoice += 4;\n\t\toffsetOfActiveVoiceCount = (synth + baseOffsetOfVoice + 4) >> 2;\n\t\tstructActiveVoiceCount = _module.HEAPU32[offsetOfActiveVoiceCount];\n\t\tif (structActiveVoiceCount !== actualCount) {\n\t\t\t// unknown structure\n\t\t\tconst c = console;\n\t\t\tc.warn(\n\t\t\t\t'js-synthesizer: cannot check synthesizer internal data (may be changed)'\n\t\t\t);\n\t\t\treturn actualCount;\n\t\t}\n\t}\n\n\tconst voiceList = _module.HEAPU32[(synth + baseOffsetOfVoice) >> 2];\n\t// (voice should not be NULL)\n\tif (!voiceList || voiceList >= _module.HEAPU32.byteLength) {\n\t\t// unknown structure\n\t\tconst c = console;\n\t\tc.warn(\n\t\t\t'js-synthesizer: cannot check synthesizer internal data (may be changed)'\n\t\t);\n\t\treturn actualCount;\n\t}\n\n\t// count of internal voice data is restricted to polyphony value\n\tconst voiceCount = _module._fluid_synth_get_polyphony(synth);\n\tlet isRunning = false;\n\tfor (let i = 0; i < voiceCount; ++i) {\n\t\t// auto voice = voiceList[i]\n\t\tconst voice = _module.HEAPU32[(voiceList >> 2) + i];\n\t\tif (!voice) {\n\t\t\tcontinue;\n\t\t}\n\t\t// offset [voice->status]\n\t\tconst status = _module.HEAPU8[voice + 4];\n\t\t// 4: FLUID_VOICE_OFF\n\t\tif (status !== 4) {\n\t\t\tisRunning = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!isRunning) {\n\t\tif (structActiveVoiceCount !== 0) {\n\t\t\tconst c = console;\n\t\t\tc.warn(\n\t\t\t\t'js-synthesizer: Active voice count is not zero, but all voices are off:',\n\t\t\t\tstructActiveVoiceCount,\n\t\t\t);\n\t\t}\n\t\t_module.HEAPU32[offsetOfActiveVoiceCount] = 0;\n\t\treturn 0;\n\t}\n\n\treturn actualCount;\n}\n\nfunction makeRandomFileName(type: string, ext: string) {\n\treturn `/${type}-r${Math.random() * 65535}-${Math.random() * 65535}${ext}`;\n}\n\n/** Hook callback function type */\nexport interface HookMIDIEventCallback {\n\t/**\n\t * Hook callback function type.\n\t * @param synth the base synthesizer instance\n\t * @param eventType MIDI event type (e.g. 0x90 is note-on event)\n\t * @param eventData detailed event data\n\t * @param param parameter data passed to the registration method\n\t * @return true if the event data is processed, or false if the default processing is necessary\n\t */\n\t(synth: Synthesizer, eventType: number, eventData: IMIDIEvent, param: any): boolean;\n}\n\n/** Client callback function type for sequencer object */\nexport interface SequencerClientCallback {\n\t/**\n\t * Client callback function type for sequencer object.\n\t * @param time the sequencer tick value\n\t * @param eventType sequencer event type\n\t * @param event actual event data (can only be used in this callback function)\n\t * @param sequencer the base sequencer object\n\t * @param param parameter data passed to the registration method\n\t */\n\t(time: number, eventType: SequencerEventType, event: ISequencerEventData, sequencer: ISequencer, param: number): void;\n}\n\nfunction makeMIDIEventCallback(synth: Synthesizer, cb: HookMIDIEventCallback, param: any) {\n\treturn (data: PointerType, event: MIDIEventType): number => {\n\t\tconst t = _module._fluid_midi_event_get_type(event);\n\t\tif (cb(synth, t, new MIDIEvent(event, _module), param)) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn _module._fluid_synth_handle_midi_event(data, event);\n\t};\n}\n\n/** Default implementation of ISynthesizer */\nexport default class Synthesizer implements ISynthesizer {\n\t/** @internal */\n\tprivate _settings: SettingsId;\n\t/** @internal */\n\tprivate _synth: SynthId;\n\t/** @internal */\n\tprivate _player: PlayerId;\n\t/** @internal */\n\tprivate _playerPlaying: boolean;\n\t/** @internal */\n\tprivate _playerDefer: undefined | {\n\t\tpromise: Promise<void>;\n\t\tresolve: () => void;\n\t};\n\t/** @internal */\n\tprivate _playerCallbackPtr: number | null;\n\t/** @internal */\n\tprivate _fluidSynthCallback: PointerType | null;\n\n\t/** @internal */\n\tprivate _buffer: PointerType;\n\t/** @internal */\n\tprivate _bufferSize: number;\n\t/** @internal */\n\tprivate _numPtr: PointerType;\n\n\t/** @internal */\n\tprivate _gain: number;\n\n\tconstructor() {\n\t\tbindFunctions();\n\n\t\tthis._settings = INVALID_POINTER;\n\t\tthis._synth = INVALID_POINTER;\n\t\tthis._player = INVALID_POINTER;\n\t\tthis._playerPlaying = false;\n\t\tthis._playerCallbackPtr = null;\n\t\tthis._fluidSynthCallback = null;\n\n\t\tthis._buffer = INVALID_POINTER;\n\t\tthis._bufferSize = 0;\n\t\tthis._numPtr = INVALID_POINTER;\n\n\t\tthis._gain = SynthesizerDefaultValues.Gain;\n\t}\n\n\t/** Return the promise object that resolves when WebAssembly has been initialized */\n\tpublic static waitForWasmInitialized(): Promise<void> {\n\t\treturn waitForInitialized();\n\t}\n\n\tpublic isInitialized() {\n\t\treturn this._synth !== INVALID_POINTER;\n\t}\n\n\t/** Return the raw synthesizer instance value (pointer for libfluidsynth). */\n\tpublic getRawSynthesizer(): number {\n\t\treturn this._synth;\n\t}\n\n\tpublic createAudioNode(context: AudioContext, frameSize?: number): AudioNode {\n\t\tconst node = context.createScriptProcessor(frameSize, 0, 2);\n\t\tnode.addEventListener('audioprocess', (ev) => {\n\t\t\tthis.render(ev.outputBuffer);\n\t\t});\n\t\treturn node;\n\t}\n\n\tpublic init(sampleRate: number, settings?: SynthesizerSettings) {\n\t\tthis.close();\n\n\t\tconst set = this._settings = _module._new_fluid_settings();\n\t\tfluid_settings_setnum(set, 'synth.sample-rate', sampleRate);\n\t\tif (settings) {\n\t\t\tif (typeof settings.initialGain !== 'undefined') {\n\t\t\t\tthis._gain = settings.initialGain;\n\t\t\t}\n\t\t\tsetBoolValueForSettings(set, 'synth.chorus.active', settings.chorusActive);\n\t\t\tsetNumValueForSettings(set, 'synth.chorus.depth', settings.chorusDepth);\n\t\t\tsetNumValueForSettings(set, 'synth.chorus.level', settings.chorusLevel);\n\t\t\tsetIntValueForSettings(set, 'synth.chorus.nr', settings.chorusNr);\n\t\t\tsetNumValueForSettings(set, 'synth.chorus.speed', settings.chorusSpeed);\n\t\t\tsetIntValueForSettings(set, 'synth.midi-channels', settings.midiChannelCount);\n\t\t\tsetStrValueForSettings(set, 'synth.midi-bank-select', settings.midiBankSelect);\n\t\t\tsetIntValueForSettings(set, 'synth.min-note-length', settings.minNoteLength);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.age', settings.overflowAge);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.important', settings.overflowImportantValue);\n\t\t\tif (typeof settings.overflowImportantChannels !== 'undefined') {\n\t\t\t\tfluid_settings_setstr(\n\t\t\t\t\tset,\n\t\t\t\t\t'synth.overflow.important-channels',\n\t\t\t\t\tsettings.overflowImportantChannels.join(',')\n\t\t\t\t);\n\t\t\t}\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.percussion', settings.overflowPercussion);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.released', settings.overflowReleased);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.sustained', settings.overflowSustained);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.volume', settings.overflowVolume);\n\t\t\tsetIntValueForSettings(set, 'synth.polyphony', settings.polyphony);\n\t\t\tsetBoolValueForSettings(set, 'synth.reverb.active', settings.reverbActive);\n\t\t\tsetNumValueForSettings(set, 'synth.reverb.damp', settings.reverbDamp);\n\t\t\tsetNumValueForSettings(set, 'synth.reverb.level', settings.reverbLevel);\n\t\t\tsetNumValueForSettings(set, 'synth.reverb.room-size', settings.reverbRoomSize);\n\t\t\tsetNumValueForSettings(set, 'synth.reverb.width', settings.reverbWidth);\n\t\t}\n\t\tfluid_settings_setnum(set, 'synth.gain', this._gain);\n\n\t\tthis._synth = _module._new_fluid_synth(this._settings);\n\n\t\tthis._numPtr = malloc(8);\n\t}\n\n\tpublic close() {\n\t\tif (this._synth === INVALID_POINTER) {\n\t\t\treturn;\n\t\t}\n\t\tthis._closePlayer();\n\t\t_module._delete_fluid_synth(this._synth);\n\t\tthis._synth = INVALID_POINTER;\n\t\t_module._delete_fluid_settings(this._settings);\n\t\tthis._settings = INVALID_POINTER;\n\t\tfree(this._numPtr);\n\t\tthis._numPtr = INVALID_POINTER;\n\t}\n\n\tpublic isPlaying() {\n\t\treturn this._synth !== INVALID_POINTER &&\n\t\t\tgetActiveVoiceCount(this._synth) > 0;\n\t}\n\n\tpublic setInterpolation(value: InterpolationValues, channel?: number) {\n\t\tthis.ensureInitialized();\n\t\tif (typeof channel === 'undefined') {\n\t\t\tchannel = -1;\n\t\t}\n\t\t_module._fluid_synth_set_interp_method(this._synth, channel, value);\n\t}\n\n\tpublic getGain() {\n\t\treturn this._gain;\n\t}\n\n\tpublic setGain(gain: number) {\n\t\tthis.ensureInitialized();\n\t\t_module._fluid_synth_set_gain(this._synth, gain);\n\t\tthis._gain = _module._fluid_synth_get_gain(this._synth);\n\t}\n\n\tpublic setChannelType(channel: number, isDrum: boolean) {\n\t\tthis.ensureInitialized();\n\t\t// CHANNEL_TYPE_MELODIC = 0, CHANNEL_TYPE_DRUM = 1\n\t\t_module._fluid_synth_set_channel_type(this._synth, channel, isDrum ? 1 : 0);\n\t}\n\n\tpublic waitForVoicesStopped() {\n\t\treturn this.flushFramesAsync();\n\t}\n\n\tpublic loadSFont(bin: ArrayBuffer) {\n\t\tthis.ensureInitialized();\n\n\t\tconst name = makeRandomFileName('sfont', '.sf2');\n\t\tconst ub = new Uint8Array(bin);\n\n\t\t_fs.writeFile(name, ub);\n\t\tconst sfont = fluid_synth_sfload(this._synth, name, 1);\n\t\t_fs.unlink(name);\n\t\treturn sfont === -1 ?\n\t\t\tPromise.reject(new Error(fluid_synth_error!(this._synth))) :\n\t\t\tPromise.resolve(sfont);\n\t}\n\n\tpublic unloadSFont(id: number) {\n\t\tthis.ensureInitialized();\n\t\tthis.stopPlayer();\n\t\tthis.flushFramesSync();\n\n\t\t_module._fluid_synth_sfunload(this._synth, id, 1);\n\t}\n\n\tpublic unloadSFontAsync(id: number) {\n\t\t// not throw with Promise.reject\n\t\tthis.ensureInitialized();\n\t\tthis.stopPlayer();\n\t\treturn this.flushFramesAsync().then(() => {\n\t\t\t_module._fluid_synth_sfunload(this._synth, id, 1);\n\t\t});\n\t}\n\n\t/**\n\t * Returns the `Soundfont` instance for specified SoundFont.\n\t * @param sfontId loaded SoundFont id ({@link loadSFont} returns this)\n\t * @return `Soundfont` instance or `null` if `sfontId` is not valid or loaded\n\t */\n\tpublic getSFontObject(sfontId: number): Soundfont | null {\n\t\treturn Soundfont.getSoundfontById(this, sfontId);\n\t}\n\n\tpublic getSFontBankOffset(id: number) {\n\t\tthis.ensureInitialized();\n\t\treturn Promise.resolve(_module._fluid_synth_get_bank_offset(this._synth, id) as number);\n\t}\n\tpublic setSFontBankOffset(id: number, offset: number) {\n\t\tthis.ensureInitialized();\n\t\t_module._fluid_synth_set_bank_offset(this._synth, id, offset);\n\t}\n\t\n\tpublic render(outBuffer: AudioBuffer | Float32Array[]) {\n\t\tconst frameCount = 'numberOfChannels' in outBuffer ? outBuffer.length : outBuffer[0].length;\n\t\tconst channels = 'numberOfChannels' in outBuffer ? outBuffer.numberOfChannels : outBuffer.length;\n\t\tconst sizePerChannel = 4 * frameCount;\n\t\tconst totalSize = sizePerChannel * 2;\n\t\tif (this._bufferSize < totalSize) {\n\t\t\tif (this._buffer !== INVALID_POINTER) {\n\t\t\t\tfree(this._buffer);\n\t\t\t}\n\t\t\tthis._buffer = malloc(totalSize);\n\t\t\tthis._bufferSize = totalSize;\n\t\t}\n\n\t\tconst memLeft = this._buffer;\n\t\tconst memRight = (this._buffer as number + sizePerChannel) as PointerType;\n\t\tthis.renderRaw(memLeft, memRight, frameCount);\n\n\t\tconst aLeft = new Float32Array(_module.HEAPU8.buffer, memLeft, frameCount);\n\t\tconst aRight = channels >= 2 ? new Float32Array(_module.HEAPU8.buffer, memRight, frameCount) : null;\n\t\tif ('numberOfChannels' in outBuffer) {\n\t\t\tif (outBuffer.copyToChannel) {\n\t\t\t\toutBuffer.copyToChannel(aLeft, 0, 0);\n\t\t\t\tif (aRight) {\n\t\t\t\t\toutBuffer.copyToChannel(aRight, 1, 0);\n\t\t\t\t}\n\t\t\t} else { // copyToChannel API not exist in Safari AudioBuffer\n\t\t\t\tconst leftData = outBuffer.getChannelData(0);\n\t\t\t\taLeft.forEach((val, i)=> leftData[i] = val);\n\t\t\t\tif (aRight) {\n\t\t\t\t\tconst rightData = outBuffer.getChannelData(1);\n\t\t\t\t\taRight.forEach((val, i)=> rightData[i] = val);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\toutBuffer[0].set(aLeft);\n\t\t\tif (aRight) {\n\t\t\t\toutBuffer[1].set(aRight);\n\t\t\t}\n\t\t}\n\n\t\t// check and update player status\n\t\tthis.isPlayerPlaying();\n\t}\n\n\tpublic midiNoteOn(chan: number, key: number, vel: number) {\n\t\t_module._fluid_synth_noteon(this._synth, chan, key, vel);\n\t}\n\tpublic midiNoteOff(chan: number, key: number) {\n\t\t_module._fluid_synth_noteoff(this._synth, chan, key);\n\t}\n\tpublic midiKeyPressure(chan: number, key: number, val: number) {\n\t\t_module._fluid_synth_key_pressure(this._synth, chan, key, val);\n\t}\n\tpublic midiControl(chan: number, ctrl: number, val: number) {\n\t\t_module._fluid_synth_cc(this._synth, chan, ctrl, val);\n\t}\n\tpublic midiProgramChange(chan: number, prognum: number) {\n\t\t_module._fluid_synth_program_change(this._synth, chan, prognum);\n\t}\n\tpublic midiChannelPressure(chan: number, val: number) {\n\t\t_module._fluid_synth_channel_pressure(this._synth, chan, val);\n\t}\n\tpublic midiPitchBend(chan: number, val: number) {\n\t\t_module._fluid_synth_pitch_bend(this._synth, chan, val);\n\t}\n\tpublic midiSysEx(data: Uint8Array) {\n\t\tconst len = data.byteLength;\n\t\tconst mem = malloc(len);\n\t\t_module.HEAPU8.set(data, mem);\n\t\t_module._fluid_synth_sysex(this._synth, mem, len,\n\t\t\tINVALID_POINTER, INVALID_POINTER, INVALID_POINTER, 0);\n\t\tfree(mem);\n\t}\n\n\tpublic midiPitchWheelSensitivity(chan: number, val: number) {\n\t\t_module._fluid_synth_pitch_wheel_sens(this._synth, chan, val);\n\t}\n\tpublic midiBankSelect(chan: number, bank: number) {\n\t\t_module._fluid_synth_bank_select(this._synth, chan, bank);\n\t}\n\tpublic midiSFontSelect(chan: number, sfontId: number) {\n\t\t_module._fluid_synth_sfont_select(this._synth, chan, sfontId);\n\t}\n\tpublic midiProgramSelect(chan: number, sfontId: number, bank: number, presetNum: number) {\n\t\t_module._fluid_synth_program_select(this._synth, chan, sfontId, bank, presetNum);\n\t}\n\tpublic midiUnsetProgram(chan: number) {\n\t\t_module._fluid_synth_unset_program(this._synth, chan);\n\t}\n\tpublic midiProgramReset() {\n\t\t_module._fluid_synth_program_reset(this._synth);\n\t}\n\tpublic midiSystemReset() {\n\t\t_module._fluid_synth_system_reset(this._synth);\n\t}\n\tpublic midiAllNotesOff(chan?: number) {\n\t\t_module._fluid_synth_all_notes_off(this._synth, typeof chan === 'undefined' ? -1 : chan);\n\t}\n\tpublic midiAllSoundsOff(chan?: number) {\n\t\t_module._fluid_synth_all_sounds_off(this._synth, typeof chan === 'undefined' ? -1 : chan);\n\t}\n\tpublic midiSetChannelType(chan: number, isDrum: boolean) {\n\t\t// CHANNEL_TYPE_MELODIC = 0\n\t\t// CHANNEL_TYPE_DRUM = 1\n\t\t_module._fluid_synth_set_channel_type(this._synth, chan, isDrum ? 1 : 0);\n\t}\n\n\t/**\n\t * Set reverb parameters to the synthesizer.\n\t */\n\tpublic setReverb(roomsize: number, damping: number, width: number, level: number) {\n\t\t_module._fluid_synth_set_reverb(this._synth, roomsize, damping, width, level);\n\t}\n\t/**\n\t * Set reverb roomsize parameter to the synthesizer.\n\t */\n\tpublic setReverbRoomsize(roomsize: number) {\n\t\t_module._fluid_synth_set_reverb_roomsize(this._synth, roomsize);\n\t}\n\t/**\n\t * Set reverb damping parameter to the synthesizer.\n\t */\n\tpublic setReverbDamp(damping: number) {\n\t\t_module._fluid_synth_set_reverb_damp(this._synth, damping);\n\t}\n\t/**\n\t * Set reverb width parameter to the synthesizer.\n\t */\n\tpublic setReverbWidth(width: number) {\n\t\t_module._fluid_synth_set_reverb_width(this._synth, width);\n\t}\n\t/**\n\t * Set reverb level to the synthesizer.\n\t */\n\tpublic setReverbLevel(level: number) {\n\t\t_module._fluid_synth_set_reverb_level(this._synth, level);\n\t}\n\t/**\n\t * Enable or disable reverb effect of the synthesizer.\n\t */\n\tpublic setReverbOn(on: boolean) {\n\t\t_module._fluid_synth_set_reverb_on(this._synth, on ? 1 : 0);\n\t}\n\t/**\n\t * Get reverb roomsize parameter of the synthesizer.\n\t */\n\tpublic getReverbRoomsize(): number {\n\t\treturn _module._fluid_synth_get_reverb_roomsize(this._synth);\n\t}\n\t/**\n\t * Get reverb damping parameter of the synthesizer.\n\t */\n\tpublic getReverbDamp(): number {\n\t\treturn _module._fluid_synth_get_reverb_damp(this._synth);\n\t}\n\t/**\n\t * Get reverb level of the synthesizer.\n\t */\n\tpublic getReverbLevel(): number {\n\t\treturn _module._fluid_synth_get_reverb_level(this._synth);\n\t}\n\t/**\n\t * Get reverb width parameter of the synthesizer.\n\t */\n\tpublic getReverbWidth(): number {\n\t\treturn _module._fluid_synth_get_reverb_width(this._synth);\n\t}\n\n\t/**\n\t * Set chorus parameters to the synthesizer.\n\t */\n\tpublic setChorus(voiceCount: number, level: number, speed: number, depthMillisec: number, type: ChorusModulation) {\n\t\t_module._fluid_synth_set_chorus(this._synth, voiceCount, level, speed, depthMillisec, type);\n\t}\n\t/**\n\t * Set chorus voice count parameter to the synthesizer.\n\t */\n\tpublic setChorusVoiceCount(voiceCount: number) {\n\t\t_module._fluid_synth_set_chorus_nr(this._synth, voiceCount);\n\t}\n\t/**\n\t * Set chorus level parameter to the synthesizer.\n\t */\n\tpublic setChorusLevel(level: number) {\n\t\t_module._fluid_synth_set_chorus_level(this._synth, level);\n\t}\n\t/**\n\t * Set chorus speed parameter to the synthesizer.\n\t */\n\tpublic setChorusSpeed(speed: number) {\n\t\t_module._fluid_synth_set_chorus_speed(this._synth, speed);\n\t}\n\t/**\n\t * Set chorus depth parameter to the synthesizer.\n\t */\n\tpublic setChorusDepth(depthMillisec: number) {\n\t\t_module._fluid_synth_set_chorus_depth(this._synth, depthMillisec);\n\t}\n\t/**\n\t * Set chorus modulation type to the synthesizer.\n\t */\n\tpublic setChorusType(type: ChorusModulation) {\n\t\t_module._fluid_synth_set_chorus_type(this._synth, type);\n\t}\n\t/**\n\t * Enable or disable chorus effect of the synthesizer.\n\t */\n\tpublic setChorusOn(on: boolean) {\n\t\t_module._fluid_synth_set_chorus_on(this._synth, on ? 1 : 0);\n\t}\n\t/**\n\t * Get chorus voice count of the synthesizer.\n\t */\n\tpublic getChorusVoiceCount(): number {\n\t\treturn _module._fluid_synth_get_chorus_nr(this._synth);\n\t}\n\t/**\n\t * Get chorus level of the synthesizer.\n\t */\n\tpublic getChorusLevel(): number {\n\t\treturn _module._fluid_synth_get_chorus_level(this._synth);\n\t}\n\t/**\n\t * Get chorus speed of the synthesizer.\n\t */\n\tpublic getChorusSpeed(): number {\n\t\treturn _module._fluid_synth_get_chorus_speed(this._synth);\n\t}\n\t/**\n\t * Get chorus depth (in milliseconds) of the synthesizer.\n\t */\n\tpublic getChorusDepth(): number {\n\t\treturn _module._fluid_synth_get_chorus_depth(this._synth);\n\t}\n\t/**\n\t * Get chorus modulation type of the synthesizer.\n\t */\n\tpublic getChorusType(): ChorusModulation {\n\t\treturn _module._fluid_synth_get_chorus_type(this._synth);\n\t}\n\n\t/**\n\t * Get generator value assigned to the MIDI channel.\n\t * @param channel MIDI channel number\n\t * @param param generator ID\n\t * @return a value related to the generator\n\t */\n\tpublic getGenerator(channel: number, param: GeneratorTypes): number {\n\t\treturn _module._fluid_synth_get_gen(this._synth, channel, param);\n\t}\n\t/**\n\t * Set generator value assigned to the MIDI channel.\n\t * @param channel MIDI channel number\n\t * @param param generator ID\n\t * @param value a value related to the generator\n\t */\n\tpublic setGenerator(channel: number, param: GeneratorTypes, value: number) {\n\t\t_module._fluid_synth_set_gen(this._synth, channel, param, value);\n\t}\n\t/**\n\t * Return the current legato mode of the channel.\n\t * @param channel MIDI channel number\n\t * @return legato mode\n\t */\n\tpublic getLegatoMode(channel: number) {\n\t\t_module._fluid_synth_get_legato_mode(this._synth, channel, this._numPtr);\n\t\treturn _module.HEAP32[(this._numPtr as number) >> 2] as LegatoMode;\n\t}\n\t/**\n\t * Set the current legato mode of the channel.\n\t * @param channel MIDI channel number\n\t * @param mode legato mode\n\t */\n\tpublic setLegatoMode(channel: number, mode: LegatoMode) {\n\t\t_module._fluid_synth_set_legato_mode(this._synth, channel, mode);\n\t}\n\t/**\n\t * Return the current portamento mode of the channel.\n\t * @param channel MIDI channel number\n\t * @return portamento mode\n\t */\n\tpublic getPortamentoMode(channel: number) {\n\t\t_module._fluid_synth_get_portamento_mode(this._synth, channel, this._numPtr);\n\t\treturn _module.HEAP32[(this._numPtr as number) >> 2] as PortamentoMode;\n\t}\n\t/**\n\t * Set the current portamento mode of the channel.\n\t * @param channel MIDI channel number\n\t * @param mode portamento mode\n\t */\n\tpublic setPortamentoMode(channel: number, mode: PortamentoMode) {\n\t\t_module._fluid_synth_set_portamento_mode(this._synth, channel, mode);\n\t}\n\t/**\n\t * Return the current breath mode of the channel.\n\t * @param channel MIDI channel number\n\t * @return breath mode (BreathFlags)\n\t */\n\tpublic getBreathMode(channel: number) {\n\t\t_module._fluid_synth_get_breath_mode(this._synth, channel, this._numPtr);\n\t\treturn _module.HEAP32[(this._numPtr as number) >> 2] as number;\n\t}\n\t/**\n\t * Set the current breath mode of the channel.\n\t * @param channel MIDI channel number\n\t * @param flags breath mode flags (BreathFlags)\n\t */\n\tpublic setBreathMode(channel: number, flags: number) {\n\t\t_module._fluid_synth_set_breath_mode(this._synth, channel, flags);\n\t}\n\n\t////////////////////////////////////////////////////////////////////////////\n\n\tpublic resetPlayer() {\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tthis._initPlayer();\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tpublic closePlayer() {\n\t\tthis._closePlayer();\n\t}\n\n\t/** @internal */\n\tprivate _initPlayer() {\n\t\tthis._closePlayer();\n\n\t\tconst player = _module._new_fluid_player(this._synth);\n\t\tthis._player = player;\n\t\tif (player !== INVALID_POINTER) {\n\t\t\tif (this._fluidSynthCallback === null) {\n\t\t\t\t// hacky retrieve 'fluid_synth_handle_midi_event' callback pointer\n\t\t\t\t// * 'playback_callback' is filled with 'fluid_synth_handle_midi_event' by default.\n\t\t\t\t// * 'playback_userdata' is filled with the synthesizer pointer by default\n\t\t\t\tconst funcPtr: PointerType = _module.HEAPU32[((player as number) + 588) >> 2]; // _fluid_player_t::playback_callback\n\t\t\t\tconst synthPtr: SynthId = _module.HEAPU32[((player as number) + 592) >> 2];    // _fluid_player_t::playback_userdata\n\t\t\t\tif (synthPtr === this._synth) {\n\t\t\t\t\tthis._fluidSynthCallback = funcPtr;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error('Out of memory');\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate _closePlayer() {\n\t\tconst p = this._player;\n\t\tif (p === INVALID_POINTER) {\n\t\t\treturn;\n\t\t}\n\t\tthis.stopPlayer();\n\t\t_module._delete_fluid_player(p);\n\t\tthis._player = INVALID_POINTER;\n\t\tthis._playerCallbackPtr = null;\n\t}\n\n\tpublic isPlayerPlaying() {\n\t\tif (this._playerPlaying) {\n\t\t\tconst status = _module._fluid_player_get_status(this._player);\n\t\t\tif (status === 1 /*FLUID_PLAYER_PLAYING*/) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tthis.stopPlayer();\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic addSMFDataToPlayer(bin: ArrayBuffer) {\n\t\tthis.ensurePlayerInitialized();\n\t\tconst len = bin.byteLength;\n\t\tconst mem = malloc(len);\n\t\t_module.HEAPU8.set(new Uint8Array(bin), mem);\n\t\tconst r: number = _module._fluid_player_add_mem(this._player, mem, len);\n\t\tfree(mem);\n\t\treturn r !== -1 ? Promise.resolve() : Promise.reject(new Error(fluid_synth_error!(this._synth)));\n\t}\n\n\tpublic playPlayer() {\n\t\tthis.ensurePlayerInitialized();\n\t\tif (this._playerPlaying) {\n\t\t\tthis.stopPlayer();\n\t\t}\n\n\t\tif (_module._fluid_player_play(this._player) === -1) {\n\t\t\treturn Promise.reject(new Error(fluid_synth_error!(this._synth)));\n\t\t}\n\t\tthis._playerPlaying = true;\n\t\tlet resolver = () => { };\n\t\tconst p = new Promise<void>((resolve) => {\n\t\t\tresolver = resolve;\n\t\t});\n\t\tthis._playerDefer = {\n\t\t\tpromise: p,\n\t\t\tresolve: resolver\n\t\t};\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic stopPlayer() {\n\t\tconst p = this._player;\n\t\tif (p === INVALID_POINTER || !this._playerPlaying) {\n\t\t\treturn;\n\t\t}\n\t\t_module._fluid_player_stop(p);\n\t\t_module._fluid_player_join(p);\n\t\t_module._fluid_synth_all_sounds_off(this._synth, -1);\n\t\tif (this._playerDefer) {\n\t\t\tthis._playerDefer.resolve();\n\t\t\tthis._playerDefer = void (0);\n\t\t}\n\t\tthis._playerPlaying = false;\n\t}\n\n\tpublic retrievePlayerCurrentTick(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(_module._fluid_player_get_current_tick(this._player));\n\t}\n\tpublic retrievePlayerTotalTicks(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(_module._fluid_player_get_total_ticks(this._player));\n\t}\n\tpublic retrievePlayerBpm(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(_module._fluid_player_get_bpm(this._player));\n\t}\n\tpublic retrievePlayerMIDITempo(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(_module._fluid_player_get_midi_tempo(this._player));\n\t}\n\tpublic seekPlayer(ticks: number): void {\n\t\tthis.ensurePlayerInitialized();\n\t\t_module._fluid_player_seek(this._player, ticks);\n\t}\n\n\t/**\n\t * Hooks MIDI events sent by the player.\n\t * initPlayer() must be called before calling this method.\n\t * @param callback hook callback function, or null to unhook\n\t * @param param any additional data passed to the callback\n\t */\n\tpublic hookPlayerMIDIEvents(callback: HookMIDIEventCallback | null, param?: any) {\n\t\tthis.ensurePlayerInitialized();\n\n\t\tconst oldPtr = this._playerCallbackPtr;\n\t\tif (oldPtr === null && callback === null) {\n\t\t\treturn;\n\t\t}\n\t\tconst newPtr = (\n\t\t\t// if callback is specified, add function\n\t\t\tcallback !== null ? _addFunction(makeMIDIEventCallback(this, callback, param), 'iii') : (\n\t\t\t\t// if _fluidSynthCallback is filled, set null to use it for reset callback\n\t\t\t\t// if not, add function defaultMIDIEventCallback for reset\n\t\t\t\tthis._fluidSynthCallback !== null ? null : _addFunction(defaultMIDIEventCallback, 'iii')\n\t\t\t)\n\t\t);\n\t\t// the third parameter of 'fluid_player_set_playback_callback' should be 'fluid_synth_t*'\n\t\tif (oldPtr !== null && newPtr !== null) {\n\t\t\t// (using defaultMIDIEventCallback also comes here)\n\t\t\t_module._fluid_player_set_playback_callback(this._player, newPtr, this._synth);\n\t\t\t_removeFunction(oldPtr);\n\t\t} else {\n\t\t\tif (newPtr === null) {\n\t\t\t\t// newPtr === null --> use _fluidSynthCallback\n\t\t\t\t_module._fluid_player_set_playback_callback(this._player, this._fluidSynthCallback!, this._synth);\n\t\t\t\t_removeFunction(oldPtr!);\n\t\t\t} else {\n\t\t\t\t_module._fluid_player_set_playback_callback(this._player, newPtr, this._synth);\n\t\t\t}\n\t\t}\n\t\tthis._playerCallbackPtr = newPtr;\n\t}\n\n\t/** @internal */\n\tprivate ensureInitialized() {\n\t\tif (this._synth === INVALID_POINTER) {\n\t\t\tthrow new Error('Synthesizer is not initialized');\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate ensurePlayerInitialized() {\n\t\tthis.ensureInitialized();\n\t\tif (this._player === INVALID_POINTER) {\n\t\t\tthis._initPlayer();\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate renderRaw(memLeft: PointerType, memRight: PointerType, frameCount: number) {\n\t\t_module._fluid_synth_write_float(this._synth, frameCount, memLeft, 0, 1, memRight, 0, 1);\n\t}\n\n\t/** @internal */\n\tprivate flushFramesSync() {\n\t\tconst frameCount = 65536;\n\t\tconst size = 4 * frameCount;\n\t\tconst mem = malloc(size * 2);\n\t\tconst memLeft = mem;\n\t\tconst memRight = (mem as number + size) as PointerType;\n\t\twhile (this.isPlaying()) {\n\t\t\tthis.renderRaw(memLeft, memRight, frameCount);\n\t\t}\n\t\tfree(mem);\n\t}\n\n\t/** @internal */\n\tprivate flushFramesAsync() {\n\t\tif (!this.isPlaying()) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tconst frameCount = 65536;\n\t\tconst size = 4 * frameCount;\n\t\tconst mem = malloc(size * 2);\n\t\tconst memLeft = mem;\n\t\tconst memRight = (mem as number + size) as PointerType;\n\t\tconst nextFrame = (\n\t\t\ttypeof setTimeout !== 'undefined' ?\n\t\t\t\t() => {\n\t\t\t\t\treturn new Promise<void>((resolve) => setTimeout(resolve, 0));\n\t\t\t\t} :\n\t\t\t\t() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}\n\t\t);\n\t\tfunction head(): Promise<void> {\n\t\t\treturn nextFrame().then(tail);\n\t\t}\n\t\tconst self = this;\n\t\tfunction tail(): Promise<void> {\n\t\t\tif (!self.isPlaying()) {\n\t\t\t\tfree(mem);\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t\tself.renderRaw(memLeft, memRight, frameCount);\n\t\t\treturn head();\n\t\t}\n\t\treturn head();\n\t}\n\n\tpublic waitForPlayerStopped() {\n\t\treturn this._playerDefer ? this._playerDefer.promise : Promise.resolve();\n\t}\n\n\t/**\n\t * Create the sequencer object for this class.\n\t */\n\tpublic static createSequencer(): Promise<ISequencer> {\n\t\tbindFunctions();\n\t\tconst seq = new Sequencer();\n\t\treturn seq._initialize().then(() => seq);\n\t}\n\n\t/**\n\t * Registers the user-defined client to the sequencer.\n\t * The client can receive events in the time from sequencer process.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param name the client name\n\t * @param callback the client callback function that processes event data\n\t * @param param additional parameter passed to the callback\n\t * @return registered sequencer client id (can be passed to seq.unregisterClient())\n\t */\n\tpublic static registerSequencerClient(seq: ISequencer, name: string, callback: SequencerClientCallback, param: number): number {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError('Invalid sequencer instance');\n\t\t}\n\t\tconst ptr = _addFunction((time: number, ev: PointerType, _seq: number, data: number) => {\n\t\t\tconst e = new SequencerEventData(ev, _module);\n\t\t\tconst type: SequencerEventType = _module._fluid_event_get_type(ev);\n\t\t\tcallback(time, type, e, seq, data);\n\t\t}, 'viiii');\n\t\tconst r = fluid_sequencer_register_client(seq.getRaw(), name, ptr, param);\n\t\tif (r !== -1) {\n\t\t\tseq._clientFuncMap[r] = ptr;\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t * Send sequencer event immediately to the specific client.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param clientId registered client id (-1 for registered synthesizer)\n\t * @param event event data\n\t */\n\tpublic static sendEventToClientNow(seq: ISequencer, clientId: number, event: SequencerEvent): void {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError('Invalid sequencer instance');\n\t\t}\n\t\tseq.sendEventToClientNow(clientId, event);\n\t}\n\t/**\n\t * (Re-)send event data immediately.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param clientId registered client id (-1 for registered synthesizer)\n\t * @param eventData event data which can be retrieved in SequencerClientCallback\n\t */\n\tpublic static sendEventNow(seq: ISequencer, clientId: number, eventData: ISequencerEventData): void {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError('Invalid sequencer instance');\n\t\t}\n\t\tseq.sendEventNow(clientId, eventData);\n\t}\n\t/**\n\t * Set interval timer process to call processSequencer for this sequencer.\n\t * This method uses 'setInterval' global method to register timer.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param msec time in milliseconds passed to both setInterval and processSequencer\n\t * @return return value of 'setInterval' (usually passing to 'clearInterval' will reset event)\n\t */\n\tpublic static setIntervalForSequencer(seq: ISequencer, msec: number) {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError('Invalid sequencer instance');\n\t\t}\n\t\treturn seq.setIntervalForSequencer(msec);\n\t}\n}\n","\n/** Error object used for errors occurred in the message receiver (e.g. Worklet) */\nexport default class MessageError extends Error {\n\t/** The name of original error object if available */\n\tpublic baseName: any;\n\t/** Detailed properties of original error object if available */\n\tpublic detail: any;\n\n\tconstructor(baseName: string, message: string, detail?: any) {\n\t\tsuper(message);\n\t\tthis.baseName = baseName;\n\t\tthis.detail = detail;\n\t\tif (detail && detail.stack) {\n\t\t\tthis.stack = detail.stack;\n\t\t}\n\t}\n}\n","\nimport MessageError from './MessageError';\n\nexport interface MethodCallEventData {\n\tid: number;\n\tmethod: string;\n\targs: any[];\n}\n\nexport interface MethodReturnEventData {\n\tid: number;\n\tmethod: string;\n\tval: any;\n\terror?: MessageErrorData;\n}\n\nexport interface MessageErrorData {\n\tbaseName: string;\n\tmessage: string;\n\tdetail: any;\n}\n\n/** @internal */\nexport interface Defer<T> {\n\tresolve(value: T): void;\n\treject(reason: any): void;\n}\n\n/** @internal */\nexport interface DeferMap {\n\t[id: number]: Defer<any>;\n}\n\n/** @internal */\nexport type HookReturnMessageCallback = (data: MethodReturnEventData) => boolean;\n\n/** @internal */\nexport interface CallMessageInstance {\n\tport: MessagePort;\n\tdefers: DeferMap;\n\tdeferId: number;\n}\n\n/** @internal */\nexport function initializeCallPort(\n\tport: MessagePort,\n\thookMessage?: HookReturnMessageCallback | undefined\n): CallMessageInstance {\n\tconst instance: CallMessageInstance = {\n\t\tport: port,\n\t\tdefers: {},\n\t\tdeferId: 0\n\t};\n\tport.addEventListener('message', (e) => processReturnMessage(instance.defers, hookMessage, e));\n\tport.start();\n\treturn instance;\n}\n\nfunction convertErrorTransferable(err: Error): MessageErrorData {\n\tconst result: any = {};\n\tconst objList: any[] = [];\n\tlet obj: any = err;\n\twhile (obj && obj !== Object.prototype) {\n\t\tobjList.unshift(obj);\n\t\tobj = Object.getPrototypeOf(obj);\n\t}\n\tobjList.forEach((o) => {\n\t\tObject.getOwnPropertyNames(o).forEach((key) => {\n\t\t\ttry {\n\t\t\t\tconst data = (err as any)[key];\n\t\t\t\tif (typeof data !== 'function' && typeof data !== 'symbol') {\n\t\t\t\t\tresult[key] = data;\n\t\t\t\t}\n\t\t\t} catch (_e) { }\n\t\t});\n\t});\n\treturn {\n\t\tbaseName: err.name,\n\t\tmessage: err.message,\n\t\tdetail: result\n\t};\n}\n\nfunction convertAnyErrorTransferable(err: any): MessageErrorData {\n\treturn convertErrorTransferable((err && err instanceof Error) ? err : new Error(`${err}`));\n}\n\nfunction makeMessageError(error: MessageErrorData): MessageError {\n\treturn new MessageError(error.baseName, error.message, error.detail);\n}\n\nfunction processReturnMessage(defers: DeferMap, hook: HookReturnMessageCallback | undefined, e: MessageEvent) {\n\tconst data: MethodReturnEventData = e.data;\n\tif (!data) {\n\t\treturn;\n\t}\n\tif (hook && hook(data)) {\n\t\treturn;\n\t}\n\tconst defer = defers[data.id];\n\tif (defer) {\n\t\tdelete defers[data.id];\n\t\tif (data.error) {\n\t\t\tdefer.reject(makeMessageError(data.error));\n\t\t} else {\n\t\t\tdefer.resolve(data.val);\n\t\t}\n\t} else {\n\t\tif (data.error) {\n\t\t\tthrow makeMessageError(data.error);\n\t\t}\n\t}\n}\n\n/** @internal */\nexport function postCall(instance: CallMessageInstance, method: string, args: any[]): void;\n\n/** @internal */\nexport function postCall({ port }: CallMessageInstance, method: string, args: any[]) {\n\tport.postMessage({\n\t\tid: -1, method, args\n\t} as MethodCallEventData);\n}\n\n/** @internal */\nexport function postCallWithPromise<T>(instance: CallMessageInstance, method: string, args: any[]): Promise<T> {\n\tconst id = instance.deferId++;\n\tif (instance.deferId === Infinity || instance.deferId < 0) {\n\t\tinstance.deferId = 0;\n\t}\n\tconst promise = new Promise<T>((resolve, reject) => {\n\t\tinstance.defers[id] = { resolve, reject };\n\t});\n\tconst transfers: Transferable[] = [];\n\tif (args[0] instanceof MessagePort) {\n\t\ttransfers.push(args[0]);\n\t}\n\tinstance.port.postMessage({\n\t\tid, method, args\n\t} as MethodCallEventData, transfers);\n\treturn promise;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport type HookCallMessageCallback = (data: MethodCallEventData) => boolean;\n\n/** @internal */\nexport interface ReturnMessageInstance {\n\tport: MessagePort;\n}\n\n/** @internal */\nexport function initializeReturnPort(\n\tport: MessagePort,\n\tpromiseInitialized: Promise<void> | null,\n\ttargetObjectHolder: () => any,\n\thookMessage?: HookCallMessageCallback | undefined\n): ReturnMessageInstance {\n\tconst instance: ReturnMessageInstance = {\n\t\tport: port\n\t};\n\tif (promiseInitialized) {\n\t\tport.addEventListener('message', (e) => {\n\t\t\tconst data = e.data;\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpromiseInitialized.then(() => processCallMessage(instance.port, data, targetObjectHolder, hookMessage));\n\t\t});\n\t} else {\n\t\tport.addEventListener('message', (e) => {\n\t\t\tconst data = e.data;\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprocessCallMessage(instance.port, data, targetObjectHolder, hookMessage);\n\t\t});\n\t}\n\tport.start();\n\treturn instance;\n}\n\nfunction processCallMessage(\n\tport: MessagePort,\n\tdata: MethodCallEventData,\n\ttargetObjectHolder: () => any,\n\thook?: HookCallMessageCallback | undefined\n) {\n\tif (hook && hook(data)) {\n\t\treturn;\n\t}\n\tconst target = targetObjectHolder();\n\tif (!target[data.method]) {\n\t\tpostReturnErrorImpl(port, data.id, data.method, new Error('Not implemented'));\n\t} else {\n\t\ttry {\n\t\t\tpostReturnImpl(port, data.id, data.method, target[data.method].apply(target, data.args));\n\t\t} catch (e) {\n\t\t\tpostReturnErrorImpl(port, data.id, data.method, e);\n\t\t}\n\t}\n}\n\n/** @internal */\nexport function postReturn(instance: ReturnMessageInstance, id: number, method: string, value: any) {\n\tpostReturnImpl(instance.port, id, method, value);\n}\n\nfunction postReturnImpl(port: MessagePort, id: number, method: string, value: any) {\n\tif (value instanceof Promise) {\n\t\tvalue.then((v) => {\n\t\t\tif (id >= 0) {\n\t\t\t\tport.postMessage({\n\t\t\t\t\tid,\n\t\t\t\t\tmethod,\n\t\t\t\t\tval: v\n\t\t\t\t} as MethodReturnEventData);\n\t\t\t}\n\t\t}, (error) => {\n\t\t\tport.postMessage({\n\t\t\t\tid,\n\t\t\t\tmethod,\n\t\t\t\terror: convertAnyErrorTransferable(error)\n\t\t\t} as MethodReturnEventData);\n\t\t});\n\t} else {\n\t\tport.postMessage({\n\t\t\tid,\n\t\t\tmethod,\n\t\t\tval: value\n\t\t} as MethodReturnEventData);\n\t}\n}\n\n/** @internal */\nexport function postReturnError(instance: ReturnMessageInstance, id: number, method: string, error: any) {\n\tpostReturnErrorImpl(instance.port, id, method, error);\n}\n\nfunction postReturnErrorImpl(port: MessagePort, id: number, method: string, error: any) {\n\tport.postMessage({\n\t\tid,\n\t\tmethod,\n\t\terror: convertAnyErrorTransferable(error)\n\t} as MethodReturnEventData);\n}\n","\nimport Sequencer from './Sequencer';\nimport Synthesizer from './Synthesizer';\nimport SynthesizerSettings from './SynthesizerSettings';\nimport waitForReady from './waitForReady';\n\nimport {\n\tConstants,\n\tSynthesizerStatus\n} from './AudioWorkletNodeSynthesizer';\n\nimport {\n\tinitializeReturnPort,\n\tMethodCallEventData,\n\tpostReturn,\n\tpostReturnError,\n    ReturnMessageInstance\n} from './MethodMessaging';\n\nconst promiseWasmInitialized = waitForReady();\n\n/** Registers processor using Synthesizer for AudioWorklet. */\nexport default function registerAudioWorkletProcessor() {\n\t/**\n\t * The processor using Synthesizer\n\t */\n\tclass Processor extends AudioWorkletProcessor {\n\n\t\tprivate synth: Synthesizer | undefined;\n\t\tprivate _messaging: ReturnMessageInstance;\n\n\t\tconstructor(options: AudioWorkletNodeOptions) {\n\t\t\tsuper(options);\n\n\t\t\tconst settings: SynthesizerSettings | undefined =\n\t\t\t\toptions.processorOptions && options.processorOptions.settings;\n\n\t\t\tconst promiseInitialized = this.doInit(settings);\n\t\t\tthis._messaging = initializeReturnPort(this.port, promiseInitialized, () => this.synth!, (data) => {\n\t\t\t\tswitch (data.method) {\n\t\t\t\t\tcase 'init':\n\t\t\t\t\t\tthis.synth!.init(sampleRate, settings);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'createSequencer':\n\t\t\t\t\t\tthis.doCreateSequencer(data.args[0]).then(() => {\n\t\t\t\t\t\t\tpostReturn(this._messaging!, data.id, data.method, void (0));\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'hookPlayerMIDIEventsByName':\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst r = this.doHookPlayerMIDIEvents(data.args[0], data.args[1]);\n\t\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\t\tpostReturn(this._messaging!, data.id, data.method, void (0));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, new Error('Name not found'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'callFunction':\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.doCallFunction(data.args[0], data.args[1]);\n\t\t\t\t\t\t\tpostReturn(this._messaging!, data.id, data.method, void (0));\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'getSFontObject':\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst name = this.doGetSFontObject(data.args[0], data.args[1]);\n\t\t\t\t\t\t\tif (name !== null) {\n\t\t\t\t\t\t\t\tpostReturn(this._messaging!, data.id, data.method, name);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, new Error('Invalid sfontId'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'playPlayer':\n\t\t\t\t\t\tthis.doPlayPlayer(data);\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\n\t\tprivate async doInit(settings?: SynthesizerSettings | undefined) {\n\t\t\tawait promiseWasmInitialized;\n\t\t\tthis.synth = new Synthesizer();\n\t\t\tthis.synth.init(sampleRate, settings);\n\t\t}\n\n\t\tprivate doCreateSequencer(port: MessagePort): Promise<void> {\n\t\t\treturn Synthesizer.createSequencer().then((seq) => {\n\t\t\t\tconst messaging = initializeReturnPort(port, null, () => seq, (data) => {\n\t\t\t\t\t// special handle for Sequencer\n\t\t\t\t\tif (data.method === 'getRaw') {\n\t\t\t\t\t\tpostReturn(messaging, data.id, data.method, (seq as Sequencer).getRaw());\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if (data.method === 'registerSequencerClientByName') {\n\t\t\t\t\t\tconst r = this.doRegisterSequencerClient(seq as Sequencer, data.args[0], data.args[1], data.args[2]);\n\t\t\t\t\t\tif (r !== null) {\n\t\t\t\t\t\t\tpostReturn(messaging, data.id, data.method, r);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpostReturnError(messaging, data.id, data.method, new Error('Name not found'));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tprivate doGetSFontObject(port: MessagePort, sfontId: number): string | null {\n\t\t\tconst sfont = this.synth!.getSFontObject(sfontId);\n\t\t\tif (sfont === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst messaging = initializeReturnPort(port, null, () => sfont, (data) => {\n\t\t\t\tif (data.method === 'getPresetIterable') {\n\t\t\t\t\tpostReturn(messaging, data.id, data.method, [...sfont.getPresetIterable()]);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\treturn sfont.getName();\n\t\t}\n\n\t\tprivate doPlayPlayer(data: MethodCallEventData) {\n\t\t\tconst syn = this.synth!;\n\t\t\tsyn.playPlayer().then(() => {\n\t\t\t\tpostReturn(this._messaging, -1, Constants.UpdateStatus, {\n\t\t\t\t\tplaying: syn.isPlaying(),\n\t\t\t\t\tplayerPlaying: syn.isPlayerPlaying()\n\t\t\t\t} as SynthesizerStatus);\n\t\t\t\tpostReturn(this._messaging!, data.id, data.method, void (0));\n\t\t\t}, (e: unknown) => {\n\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, e);\n\t\t\t})\n\t\t}\n\n\t\tprivate doHookPlayerMIDIEvents(name: string | null | undefined, param: any) {\n\t\t\tif (!name) {\n\t\t\t\tthis.synth!.hookPlayerMIDIEvents(null);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst fn: any = (AudioWorkletGlobalScope[name]);\n\t\t\tif (fn && typeof fn === 'function') {\n\t\t\t\tthis.synth!.hookPlayerMIDIEvents(fn, param);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate doCallFunction(name: string, param: any) {\n\t\t\tconst fn: any = (AudioWorkletGlobalScope[name]);\n\t\t\tif (fn && typeof fn === 'function') {\n\t\t\t\tfn.call(null, this.synth, param);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow new Error('Name not found');\n\t\t}\n\n\t\tprivate doRegisterSequencerClient(seq: Sequencer, clientName: string, callbackName: string, param: number) {\n\t\t\tconst fn: any = (AudioWorkletGlobalScope[callbackName]);\n\t\t\tif (fn && typeof fn === 'function') {\n\t\t\t\treturn Synthesizer.registerSequencerClient(seq, clientName, fn, param);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic process(_inputs: Float32Array[][], outputs: Float32Array[][]) {\n\t\t\tif (!this.synth) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst syn = this.synth!;\n\t\t\tsyn.render(outputs[0]);\n\t\t\tpostReturn(this._messaging, -1, Constants.UpdateStatus, {\n\t\t\t\tplaying: syn.isPlaying(),\n\t\t\t\tplayerPlaying: syn.isPlayerPlaying()\n\t\t\t} as SynthesizerStatus);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tregisterProcessor(Constants.ProcessorName, Processor);\n}\n","import Synthesizer from \"./Synthesizer\";\n\n/** @internal */\ndeclare global {\n\tvar Module: any;\n}\n\n/**\n * Returns the Promise object which resolves when the synthesizer engine is ready.\n */\nexport default function waitForReady(): Promise<void> {\n\treturn Synthesizer.waitForWasmInitialized();\n}\n","\nimport registerAudioWorkletProcessor from './registerAudioWorkletProcessor';\n\nimport { rewriteEventData } from './ISequencerEventData';\nimport Synthesizer from './Synthesizer';\n\nAudioWorkletGlobalScope.JSSynth = {\n\trewriteEventData: rewriteEventData,\n\tSynthesizer: Synthesizer\n};\n// deprecated\nAudioWorkletGlobalScope.Fluid = AudioWorkletGlobalScope.JSSynth;\n\nregisterAudioWorkletProcessor();\n"],"sourceRoot":""}